<?xml version="1.0"?>
<commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    greetings="Welcome to Paradox!" 
    prompt="paradox> ">
    
	<description>Paradox adds SQL query capability to Oracle NoSQL Key-Value datastore.
		A flexible schema is required to validate SQL.
	</description>

	<command key="help">
		<description>Prints help about available commands</description>
		<arg name="command" maxOccurs="1" minOccurs="0">
			<description>a command name</description>
		</arg>
	</command>

	<command key="get">
		<description>Gets the value for the given key(s)</description>
		<arg name="key" minOccurs="1" maxOccurs="-1">
			<description>key used for Oracle NoSQL datastore</description>
		</arg>
	</command>
	
	<command key="schema">
		<description>Defines or describes schema from a given resource file.</description>
		<details>Reads a schema descriptor file and compiles to build a Schema. If invoked without an argument
		then shows the current schema</details>
		<arg name="schema descriptor" maxOccurs="1" minOccurs="0">
			<description>A resource name. The resource defines
				available types and their attributes in JSON format
			</description>
		</arg>
	</command>

	<command key="data">
		<description>Loads data from a given JSON file</description>
		<option flag="type" name="user defined type">
			<description>A user defined type</description>
		</option>
		<option flag="validate" requiresValue="false" optional="true">
			<description>Validates data by the schema</description>
		</option>
		<arg name="data file" maxOccurs="1">
			<description>a file where each line contains a JSON formatted data for a given type</description>
		</arg>


	</command>
	<command key="connect">
		<description>Connects to a Oracle NoSQL Key-Value data store</description>
		<arg name="url" maxOccurs="1">
			<description>Connection URL format is nosql://store-name@host:port. Default host is 'localhost'. 
			Default port is 5000.</description>
		</arg>
	</command>

	<command key="select" parse="false">
		<description>Executes a SQL select statement</description>
		<usage>select [projection|*] from [type] (where predicate (and|or predicate)) (order by) (group by) (skip n) (limit n)</usage>
	</command>
	<command key="exit">
		<description>Exits this process</description>
	</command>
	
	<command key="status">
        <description>Prints current state of the client</description>
    </command>
    
    <command key="exit">
        <description>Exits this process</description>
    </command>
	
</commands>
